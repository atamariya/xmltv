#!/usr/bin/perl -w

eval 'exec /usr/bin/perl -w -S $0 ${1+"$@"}'
    if 0; # not running under some shell

=pod

=head1 NAME

tv_grab_in - Grab TV listings for India from Times Of India website 

=head1 SYNOPSIS

tv_grab_in --help

tv_grab_in --configure [--config-file FILE]

tv_grab_in [--config-file FILE]
                 [--days N] [--offset N]
                 [--output FILE] [--quiet]

tv_grab_in --list-channels [--config-file FILE]
                 [--output FILE] [--quiet]
                 
                
=head1 DESCRIPTION

Outputs TV listings in XMLTV format for stations available in 
India. 

Then running B<tv_grab_in> with no arguments will get listings for
all the channels.

=head1 OPTIONS

B<--configure> Prompt for which stations to download and write the
configuration file.

B<--config-file FILE> Set the name of the configuration file, the
default is B<~/.xmltv/tv_grab_in.conf>. This is the file written by
B<--configure> and read when grabbing.

B<--output FILE> When grabbing, write output to FILE rather than
standard output.

B<--days N> When grabbing, grab N days rather than 5.

B<--offset N> Start grabbing at today + N days. Also supports negative offset for past listings.

B<--quiet> Only print error-messages on STDERR.

B<--debug> Provide more information on progress to stderr to help in
debugging.

B<--list-channels> Output a list of all channels that data is available
                      for. The list is in xmltv-format.

B<--capabilities> Show which capabilities the grabber supports. For more
information, see L<http://wiki.xmltv.org/index.php/XmltvCapabilities>

B<--version> Show the version of the grabber.

B<--help> Print a help message and exit.

=head1 ERROR HANDLING

If the grabber fails to download data, it will print an
errormessage to STDERR and then exit with a status code of 1 to indicate
that the data is missing.

=head1 CREDITS

Grabber written by Anand Tamariya, atamariya@gmail.com
This documentation copied from tv_grab_cz,
This code modified from tv_grab_cz, by Mattias Holmlund, mattias -at- holmlund -dot- se.
L<http://wiki.xmltv.org/index.php/HowtoWriteAGrabber>

=head1 BUGS

None known.

=cut

use strict;
use XMLTV::Configure::Writer;
use XMLTV::Options qw/ParseOptions/;
use XML::LibXML;
use LWP::Simple;
use Date::Calc qw(Add_Delta_Days);
use URI::Escape qw(uri_escape);
use JSON;
use Data::Dumper;

# config vars
my $webroot = "http://timesofindia.indiatimes.com/";
my $loginURL = "http://timesofindia.indiatimes.com/";

my( $opt, $conf ) = ParseOptions( {
     grabber_name => "tv_grab_in",
     capabilities => [qw/baseline manualconfig apiconfig/],
     stage_sub => \&config_stage,
     listchannels_sub => \&list_channels,
     version => '$Id: tv_grab_in,v 1.2 2015/06/27 00:30:54 atamariya Exp $',
     description => "India (timesofindia.indiatimes.com)",
} );

# Get all the configured channels 
my @channels = @{$conf->{channel}};

# my ($encoding, $credits, $ch, $progs) = @$data;
my $data;
$data->[0] = "UTF-8";
$data->[1] = {'generator-info-name' => 'tv_grab_in'};

# Process 10 channels at a time
while (my @next_n = splice @channels, 0, 10) {
	my $channels_str = join ",", @next_n;

	my $days = $opt->{days};
	my $offset = $opt->{offset};
	# Process 1 day at a time
	do {
		my $url = buildURL( 'get_schedule', $conf, $opt, $channels_str );

		# fetch data
		my $res = get( $url );
		#print $res;
		transform_program($res);

		$opt->{offset}++;

	} while (--$opt->{days} > 0);
	$opt->{days} = $days;
	$opt->{offset} = $offset;
}

XMLTV::write_data($data);

sub config_stage
{
	my( $stage, $conf ) = @_;
	my $result;
	 
	my $writer = new XMLTV::Configure::Writer( OUTPUT => \$result );
	 
	if( $stage eq 'start' ) {
		$writer->start( { grabber => 'tv_grab_in' } );
		$writer->end( 'select-channels' );
	} elsif( $stage eq 'two' ) {
		$writer->start( { grabber => 'tv_grab_in' } );
		
		my $parser = new XML::LibXML;
		
		# fetch XML lineup tree
		my $raw = get( $webroot . 'get_lineups/' . $conf->{'apikey'}->[0] );
		
		if( !defined $raw ) {
			die 'request failed';
		}
		
		my $xmlTree = $parser->parse_string( $raw );
		my $root = $xmlTree->getDocumentElement();
		
		# get each lineup element
		my @kids = $root->childNodes();
		my $size = @kids;
		
		if( $size == 0 ) {
			die "You have no lineups associated with your API Key, or your key is invalid. Please login to ($loginURL) and select at least one lineup before continuing.";
		}
		
		$writer->start_selectone( {
			id => 'lineup',
			title => [ [ 'Lineup', 'en' ] ],
			description => [ [ "Choose one of your lineups. You can add or modify lineups from your account page ($loginURL)", 'en' ] ],
		} );
		
		# create option for each lineup element
		foreach my $child (@kids)
		{
			my $lineupName = $child -> textContent;
			my $lineupId = $child -> getAttribute('id');
			
			$writer->write_option( {
				value => $lineupId,
				text=> => [ [ $lineupName, 'en' ] ]
			} );
		}
		
		$writer->end_selectone();
		$writer->end( 'select-channels' );
		
		
	  } else {
		die "Unknown stage $stage";
	  }
	
     return $result;
}

# Return a string containing an xml-document with <channel>-elements
# for all available channels of selected lineup
sub list_channels
{
	# $opt hold command line parameters, if any
	my( $conf, $opt ) = @_;
	
	my $url = buildURL( 'get_channels', $conf, $opt );
	
	# fetch list of channels 
	my $channels = get( $url );
	my $data = transform_channel( $channels );

	# return XML string
	return $data;
}

# Transform comma separated string to XMLTV channel list in string form
sub transform_channel
{
	my ( $str ) = @_;
	my @array = split( ",", $str);
	my $result;
	my $writer = new XMLTV::Writer(OUTPUT => \$result);
	$writer->start({'generator-info-name' => 'tv_grab_in'});

	foreach my $name (@array) {
		my %channel = (id => "$name", 
			'display-name' => [ [ "$name", "en" ] ]);
		$writer->write_channel( \%channel );
	}
	$writer->end();
	#printf $result;

	return $result;
}

# Transform schedule JSON to XMLTV channel list in $data 
sub transform_program
{
	my ( $str ) = @_;
	my $ptr = decode_json $str;
	$ptr = $ptr->{"ScheduleGrid"}->{"channel"}; 

	my $tz = "+0530";
	my $lang = "en";
	my ($encoding, $credits, $ch, $progs) = @$data;
	foreach my $c (@$ptr) {
		if (! %$ch{$c->{"channelid"}}) {
			$ch->{$c->{"channelid"}} = { id => $c->{"channelid"}, 
				icon => [ { src => $c->{"channellogourl"}} ],
				'display-name' => [ [ $c->{"display-name"}, $lang ] ]};
		}
		my $program = $c->{"programme"};
		foreach my $p (@$program) {

			my %prog = (channel =>  $c->{"channelid"}, 
				start => "$p->{'start'} $tz",
				stop => "$p->{'stop'} $tz",
				category => [ [$p->{"subgenre"}, $lang] ],
				#"episode-num" => [ [ 1, "onscreen"] ],
				icon => [ { src => $p->{"programmeurl"}} ],
				date => $p->{"date"},
				title => [ [ $p->{"title"}, $lang ] ]);
			push @$progs, \%prog;
		}
	}

	$data->[2] = $ch;
	$data->[3] = $progs;
	#print Dumper $ch;
}

# build API URL for a given action
sub buildURL
{
	
	my( $action, $conf, $opt, $channels ) = @_;
	my $url;
	if ($action eq "get_channels") {
		$url  = $webroot . "tvschannellist.cms?genrename=all";
		return $url;
	} elsif ($action eq "get_schedule") {
		$channels =~ s/\ /%20/g ;
		$url  = $webroot . "tvschedulejson.cms?channellist=" . $channels;
	} else {
		die "Invalid action\n";
	}
	
	my ($from, $to) = get_dates($opt);
	$url .= "&fromdatetime=" .  $from;
	$url .= "&todatetime=" .  $to;
	#print($url . "\n");
	
	return $url;
}

# Return from and to date strings based on offset and days
sub get_dates
{
	my ($opt) = @_;
	my ($sec,$min,$hour,$day,$month,$year,$wday,$yday,$isdst) = localtime();
	my ($from, $to);
	$year += 1900;
	$month++;

	if( $opt->{offset} > 0 ) {
		# append offset
		($year, $month, $day) = Add_Delta_Days($year, $month, $day,  $opt->{offset});
		($min, $hour) = (0, 0);
	}
	$from = sprintf "%04d%02d%02d%02d%02d", ($year, $month, $day, $hour, $min);

	if( $opt->{days} > 0 ) {
		# append days
		#($year, $month, $day) = Add_Delta_Days($year, $month, $day,  $opt->{days});
		($year, $month, $day) = Add_Delta_Days($year, $month, $day, 1);
		$to = sprintf "%04d%02d%02d0000", ($year, $month, $day);
	}
	return ($from, $to);
}
